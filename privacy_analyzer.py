"""
Privacy Analyzer ‚Äî –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ Bitcoin-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
"""

import requests
import argparse

def fetch_tx(txid):
    url = f"https://api.blockchair.com/bitcoin/raw/transaction/{txid}"
    r = requests.get(url)
    if r.status_code != 200:
        raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.")
    return r.json()["data"][txid]["decoded_raw_transaction"]

def fetch_address_usage(address):
    url = f"https://api.blockchair.com/bitcoin/dashboards/address/{address}"
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()["data"][address]["address"]

def analyze_privacy(txid):
    tx = fetch_tx(txid)
    inputs = tx.get("vin", [])
    outputs = tx.get("vout", [])

    print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {txid}")
    print(f"üî¢ –í—Ö–æ–¥–æ–≤: {len(inputs)} | –í—ã—Ö–æ–¥–æ–≤: {len(outputs)}")

    reused_addresses = 0
    input_addresses = []

    for vin in inputs:
        if "prev_out" in vin and "scriptpubkey_address" in vin["prev_out"]:
            addr = vin["prev_out"]["scriptpubkey_address"]
            input_addresses.append(addr)
            usage = fetch_address_usage(addr)
            if usage and usage["transaction_count"] > 1:
                reused_addresses += 1

    print(f"‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤: {reused_addresses}/{len(inputs)}")
    if reused_addresses > 0:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–¥—Ä–µ—Å–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å.")

    cluster_risk = len(set(input_addresses)) < len(inputs)
    if cluster_risk:
        print("üß† –í—Å–µ –≤—Ö–æ–¥—ã –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –æ–¥–Ω–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É (input clustering).")

    output_values = [o["value"] for o in outputs if "value" in o]
    if len(output_values) >= 2 and abs(output_values[0] - output_values[1]) < 1000:
        print("üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π output-splitting (equal outputs).")

    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Privacy Analyzer ‚Äî –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
    parser.add_argument("txid", help="TXID –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    args = parser.parse_args()
    analyze_privacy(args.txid)
